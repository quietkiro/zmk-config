/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
 
#define CMK 0
#define SYM 1
#define NUM 2
#define NAV 3
#define FUN 4

#define HYPER LG(LS(LA(LCTRL)))

&caps_word {
   continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/ {
    combos {
        #include "combos.dtsi"    
    };

    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
        hold_bootloader: hold_bootloader {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_BOOTLOADER";
            #binding-cells = <2>;
            tapping-term-ms = <1000>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&bootloader>, <&none>;
        };
        hold_reset: hold_reset {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_RESET";
            #binding-cells = <2>;
            tapping-term-ms = <1000>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&sys_reset>, <&none>;
        };
        hold_bt_clr: hold_bt_clr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_BT_CLR";
            #binding-cells = <2>;
            tapping-term-ms = <5000>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&macro_bt_clr>, <&none>;
        };
        hold_pr: hold_pr {
          compatible = "zmk,behavior-hold-tap";
          label = "HOLD_PR";
          #binding-cells = <2>;
          tapping-term-ms = <100>;
          quick-tap-ms = <0>;
          flavor = "balanced";
          bindings = <&macro_pr>, <&none>;
        };
        comma_qmark: comma_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QMARK";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;
            mods = <(MOD_LSFT)>;
        };
        dot_excl: dot_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_EXCL";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp EXCL>;
            mods = <(MOD_LSFT)>;
        };
    };
    macros {
        ZMK_MACRO(
            macro_bt_clr,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&bt BT_CLR>;
        )
        ZMK_MACRO(
            macro_pr,
            wait-ms = <50>;
            tap-ms = <40>;
            bindings = <&macro_press &LSHFT>
                    , <&macro_press &LCTRL>
                    , <&kp UP>
                    , <&macro_release &LCTRL>
                    , <&macro_release &LSHFT>
                    , <&macro_press &LCTRL>
                    , <&kp C>
                    , <&macro_release &LCTRL>
                    , <&kp RIGHT>
                    , <&kp ENTER>
                    , <&macro_press LCTRL>
                    , <&macro_press LALT>
                    , <&kp V>
                    , <&macro_release LALT>
                    , <&macro_release LCTRL>
                    , <&macro_press LCTRL>
                    , <&macro_press LSHFT>
                    , <&kp V>
                    , <&macro_release LSHFT>
                    , <&macro_release LCTRL>;
        )
    };
};

#define HOLD_BOOTLOADER &hold_bootloader 0 0
#define HOLD_RESET &hold_reset 0 0
#define HOLD_BT_CLR &hold_bt_clr 0 0
#define HOLD_PR &hold_pr 0 0

/*           34 Keys
╭──────────────╮ ╭──────────────╮
│ 0  1  2  3  4│ │ 5  6  7  8  9│
│10 11 12 13 14│ │15 16 17 18 19│
│20 21 22 23 24│ │25 26 27 28 29│
╰────────╮30 31│ │32 33╭────────╯
         ╰─────╯ ╰─────╯         */


/ {
        keymap {
                compatible = "zmk,keymap";
                colemak_layer {
// -----------------------------------------------------------------
// |  Q  |  W  |  F  |  P  |  B  | |  J  |  L  |  U  |  Y  |  ;  |
// |  A  |  R  |  S  |  T  |  G  | |  M  |  N  |  E  |  I  |  O  |
// |  Z  |  X  |  C  |  D  |  V  | |  K  |  H  |  ,  |  .  |-NAV-|
//                   |-SYM-| SPC | | RET |-NUM-|
                        bindings = <
   &kp Q &kp W &kp F &kp P &kp B &kp J &kp L   &kp U     &kp Y   &kp SEMI
   &kp A &kp R &kp S &kp T &kp G &kp M &kp N   &kp E     &kp I   &kp O
   &kp Z &kp X &kp C &kp D &kp V &kp K &kp H   &comma_qmark &dot_excl &sl NAV
                   &sl SYM &kp SPACE &kp RET &sl NUM
                        >;
                };
                symbol_layer {
// -----------------------------------------------------------------
// |     |  {  |  *  |  }  |  PR | |     |  <  |  ^  |  >  |     |
// |  \  |  [  |  :  |  ]  |     | |     |  (  |  '  |  )  |  `  |
// | HYP |     |  ;  |  @  |     | |     |  #  |  "  |  &  |     |
//                   |_SYM_| SPC | | RET | ESC |
                        bindings = <
   &none  &kp LBRC &kp STAR &kp RBRC  HOLD_PR &none &kp LT &kp CARET &kp GT &none
   &kp BSLH &kp LBKT &kp COLON &kp RBKT  &none &none &kp LPAR &kp SQT &kp RPAR &kp GRAVE
   &sk HYPER  &none   &kp SEMI  &kp AT  &none &none &kp HASH &kp DQT   &kp AMPS   &none
                             &trans &kp SPACE &kp RET &kp ESC
                        >;
                };
                number_layer {
// -----------------------------------------------------------------
// |     |  4  |  5  |  6  |     | |     |  |  |  ~  |  *  |     |
// |  .  |  1  |  2  |  3  |     | |     |  +  |  -  |  =  |  /  |
// |  ,  |  7  |  8  |  9  |     | |     |  $ £|  _  |  %  |-FUN-|
//                   |  0  | SPC | | RET |_NUM_|
                        bindings = <
   &none  &kp N4 &kp N5 &kp N6 &none &none &kp PIPE &kp TILDE &kp STAR  &none
   &kp DOT &kp N1 &kp N2 &kp N3 &none &none &kp PLUS  &kp MINUS &kp EQUAL &kp FSLH
   &kp COMMA  &kp N7 &kp N8 &kp N9 &none &none &kp DOLLAR &kp UNDER  &kp PRCNT    &sl FUN
                 &kp N0 &trans &kp RET  &trans
                        >;
                };
                nav_layer {
// VHINT - Vimac hint mode and exits nav layer
// SCRLL - Vimac scroll mode and stays in nav layer
// FOCUS - move focus across open windows
// THROW - move windows into different workspaces
// -----------------------------------------------------------------
// |     | W 4 | W 5 | W 6 |     | |     |A-CLK|VHINT| CLK |     |
// |THROW| W 1 | W 2 | W 3 |     | | LFT | DWN | U P |RIGHT| DEL |
// |NAVLK| W 7 | W 8 | W 9 |     | |     | S 1 | S 2 | S 3 |_NAV_|
//                   |FOCUS| SPC | | RET |SCRLL|
                        bindings = <
   &none &none &none &none &none &none    &none     &none     &none     &none 
   &none &none &none &none &none &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &trans  
   &tog NAV &none &none &none &none &none &none &none &none   &none 
                         &none &trans &trans &trans
                        >;
                };
                fun_layer {
// -----------------------------------------------------------------
// |     | F 4 | F 5 | F 6 |     | |     | BT0 | BT1 | BT2 |     |
// | F11 | F 1 | F 2 | F 3 |FLASH| |FLASH|VMUTE|VOLDN|VOLUP|POWER|
// | F12 | F 7 | F 8 | F 9 |RESET| |RESET|BTCLR|BRIDN|BRIUP|_FUN_|
//                   | F10 | SPC | | SFT |_NUM_|
                        bindings = <
   &none &kp F4 &kp F5 &kp F6 &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
   &kp F11 &kp F1 &kp F2 &kp F3 HOLD_BOOTLOADER HOLD_BOOTLOADER &kp K_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp K_PWR
   &kp F12 &kp F7 &kp F8 &kp F9  HOLD_RESET HOLD_RESET HOLD_BT_CLR &kp C_BRI_DN &kp C_BRI_UP &trans
                         &kp F10 &trans &trans &trans 
                        >;
                };
        };
};
